
<<------------------------------------------------------------------------------------------->>
                               Chapter 1

UEFI - Unified Extensible Firmware Interface
BIOS - Basic Input and Output System

- files in the /etc control startup behaviour especially those in the
  /etc/default and /etc/sysconfg

OBJECTIVES:
   -Explain the boot process
        The basic steps are:
           1. The BIOS/UEFI locates and executes the boot program, or boot loader.
           2. The boot loader loads the kernel.
           3. The kernel starts the 'init' process(pid=1).
           4. init manages system initialization, using conventional 'SysVinit' startup scripts, or
              using 'Upstart' or sysmd.
                                                         Checkmemory and hardware
                                                        /
           STEPS: BIOS ---> Power On Self Test(POST) --> 
                                                        \ 
                                                         Locates boot program in MBR(Master Boot Record)
                                                                                |
                                                                                V
									       GRUB(GRand Unified Bootloader)
											  |
							                                  V
                                                                                        Kernel
                                                                                          |
                                                                                        Hardware check
                                                                                          |
                                                                                        init processes start
                                                                                         /|\
                                                                                        / | \
                                                                               SysVinit   |  systemd
                                                                           init scripts   |               
                                                                                        Upstart

   -Identify several types of boot loaders.
        Types include: 
              GRUB
              LILO - Linux Loader (obsolete)
              efilinux - designed for the UEFI mechanism
              Das U-Boot - most popular loader for embedded Linux systems; others include
                           bareboot.
   -Describe what BIOS does.
        Checks memory and hardware, then locates Boot loader in MBR
   -Identify the relevant configuration files.
        they are: /etc/sysconfig for RHEL, and /etc/default for Debian systems
   -Describe how the system shuts down and reboots.
        commands examples: 
             sudo shutdown -h +1 "Power Failure imminent"
             sudo shutdown -h now
             sudo shutdown -r now
             sudo shutdown now
             FORMAT: shutdown [OPTIONS...] [TIME] [WALL...]
             find more help using 'shutdwon --help'

   Basic Steps For Computer Startup:
          1 - Boot loader
          2 - Linux kernel and initrd or initramfs loaded into memory and kernel executes
          3 - init process starts
          4 - Additional kernel modules(including device drivers) are loaded, system services started.


<<------------------------------------------------------------------------------------------------------------>>

                                    Chapter 3

 OBJECTIVES:
      - Explain what the role of the GRUB is.
          1 - handles the early phases of system startup
          2 - makes it possible to choose alternatives OS
          3 - makes it possible to choose alternative kernels and/or initial ramdisks at boot time
          4 - Boot paramters can be easily changed at boot time without having to edit configuration
              files, etc. in advance.
      - Understand the differences btween the GRUB 1 and GRUB 2 versions.
              GRUB 2 :
                 - file read at boot are
                      /boot/grub/grub.cfg or /boot/grub2/grub.cfg
                      This file is auto-generated by update-grub (or grub2-mkconfig on RHEL 7) 
                      based on configuration files in the /etc/grub.d directory and on /etc/default/grub
              GRUB 2 :
                 - file read at boot are
                      /boot/grub/grub.conf or /boot/grub/menu.lst.
                      In RHEL 5-7, it can be edited using the 'grubby utility'. Any changes made will be preserved
                      but in GRUB 2 any changes to grub.cfg is lost wne next it is auto-generated.
      - Be familiar with the interactive selections you can make at boot.
              - on entering the GRUB environment after BIOS setup menu appears
              - menu offers the ffl.: 
                          ~ list of bootable images
                          ~ interactive shell - for altering the available stanzas
                          ~ enter pure shell command
                          ~ reinstall GRUB
                
      - Know how to install GRUB                                                    GRUB 1 using a program called grub -> $ sudo grub or grub-install
                                                                                   /                                      > root (hd0, 0)
              - install grub program and associated utilities in proper locations -                                       > setup (hd0)
                                                                                   \                                      > exit
                                                                                    \
                                                                                     GRUB 2 uses a bunch of utilities like grub2-* or grub-*
                                                                                        -> $ sudo grub2-install /dev/sda
                                                                                                            
              - installing files GRUB needs to operate at boot time, either under /boot/grub or /boot/grub2
                           : Linux kernel files vmlinux-*, initramfs-* which need to be in the /boot directory
              - installing GRUB as the boot loader in the system
          
      - Explain how the configuration files that GRUB needs are used and modified.
                    - the two locations that are used in the reconstruction of the /boot/grub2/grub.cfg are:                  
                          /etc/default/grub, and
                          /etc/grub.d
        
-----------------------------------------------------------------------------------------------------------------<<
                   GRUB Device Nomenclature

     - sda1 is (hd0,1) in GRUB 2 but (hd0,0) in GRUB 1
     - sdc4 -s (hd2,4) in GRUB 2 but (hd1,3) in GRUB 1

  Note: In the configuration file, each stanza has to specify what the root partition is i.e. the partition that contains
        the 'kernel' itself(in the /boot directory), say /boot had its own directory /dev/sda1, then
        For GRUB 1, 
                title 3.17.3
                       root (hd0,0)
                       kernel vmlinuz-3.17.3 ro root=/dev/sda2 quiet
                       intrd intramfs-3.17.1.img
    
        If /boot is not in its own partition, it might look like
                  title 3.17.3
                        root (hd0,0)
                        kernel /boot/vmlinuz-3.17.3 ro root=/dev/sda1 quiet
                        intrd /boot/intramfs-3.17.3.img

       it is also fine to do kernel (hd0,0)/vmlinuz

<<------------------------------------------------------------------------------------------------------------------------>>

                                      Chapter 4 init: SystemV, Upstart, Systemd

Steps: 
	Device recognition and initialization
	launch system services
	filesystems made available
	start important management systems
	make system available
	

OBJECTIVE:
	- Understand the importance of the 'init' process.
	- Explain the traditional SysVinit method works and how it incorporates 'runlevels' and
	  what happens in each one.
	- know how to use chkconfig and service to start and stop services or make them persistent across
	  reboots.
	- Understand the alternative 'Upstart' and 'systemd'
	- Use 'systemctl' to configure and control 'systemd'.
	
	
The mother process controller is the /sbin/init or simple called 'init'

                                 System Runlevels
     -----------------------------------------------------------------------------
       Runlevel         |         Meaning                                        
     -----------------------------------------------------------------------------
           S,s          |  Same as 1
           0            |  Shutdown system and turn off
           1            |  Single User Mode
           2            |  Multiple user, no NFS, only text login
           3            |  Mutiple user, with NFS and network, only text login
           4            |  Not used
           5            |  Multiple user, with NFS and network, graphical login with X
           6            |  Reboot
     ------------------------------------------------------------------------------
     
     
telinit can be used to change from one level to another
$ sudo /sbin/telinit 5

On start the 'init' process reads the /etc/inittab
	- Here the scripts to be run are mentioned along with other parameters.
	- Format: id:runlevel(s):action:process
		- where:
		    id - a unique 1-4 character identification for the entry
		    runlevel(s) - zero or more single characters or digit indicating runlevel the action will be taken for.
		    action - describes the action to be taken.
		    process - specifies the process to be executed.
		    
		    
The 'init' run steps:
                                                         1                    2
	(init)/sbin/init -----> /etc/inittab ===> (script)rc.sysinit ===> (script)rc
	                   |                            ^                        ^                                           
	                   |				|                        |
	                   |			[start LVM, mount fs, etc.]      |
	                   |							 |
	    <Reads from for scripts to be run>                                   |
	    									 |
	    					<makes system to go to rc.d/rc[0-6].d and run all scrips there>


Note: All runlevel directory link back to the /etc/init.d directory where all the scripts actually reside.
      Start scripts start with S in name
      Kill scripts start with K in name
      --Controlling which initialization scripts are run on entry to each runlevel involves managing the symbolic links,
        this can be done manually but the 'chkconfig' utility is used to do this efficiently.
Note: Ubuntu uses update-rc.d inplace of chkconfig

	chkconfig useage:
		- check service to see if it is set to run in the current level
		'chkconfig service_name'
		
		- see what services are configured to run in each of the run levels
		'chkconfig --list [service names]
		
		- Turn on a certain service next time the system boots
		'sudo chconfig somme_service on'
		
		- Do not turn on a service next time the system boots
		'chkconfig some_service off
		
		- Change a currently running service
		'sudo chkconfig service_name [stop | start]
		
The chkconfig utility process explained:
  Syntax in scripts:
     #  chkconfig: 2345 10 90		
		--meaning runlevel 2, 3, 4, 5
		--start script -> S10
		--stop script -> K90
		
		
UPSTART:
	 is 'event driven', rather than being a set of serial procedures. Event notifications are sent to the 'init' process to tell it to execute
	certain commands at the right time after pre-requisites have been fulfilled. 'Upstart' is being superseded by 'systemd'.

	Upstart configuration files are:
		- /etc/init/rcS.conf
		- /etc/rc-sysinit.conf
		- /etc/inittab
		- /etc/init/rc.conf
		- /etc/rc[0-6].d
		
	Upstart events are found in the /etc/event.d or (in Ubuntu) /etc/apm/event.d
	
	Using 'initctl'	you can view, start, stop jobs in much the same way as that 'service' does.
	       syntax: initctl options command
	               - options includes: start, stop, restart, reload, status, list, emit
	               
	      More info: www.//upstart.ubuntu.com/cookbook

UPSTART STEPS:
--------------


             (/sbin/init)
                |
Kernel -----> init
                  \
                   \
                    \
                    V
                    rcS.conf(script)
                    |
                    |
                    |
                    V
                    rc-sysinit.conf(script)
                   /
                  /
                 V
   -LVM loaded
   -Mount filesystems
   -Execute all runlevel
    scripts specified in the 
    /etc/inittab via
    the rc.conf script
   -then prefdm.conf is run
    at runlevel 5 
		
SYSTEMD(systemd)
---------------
  features include:
      - compatible with SysVinit scripts.
      - Boosts faster.
      - provides paralization capabilities.
      - Uses socket and D-Bus activation for starting services.
      - Replaces scripts with programs.
      - Offers on-demand starting daemons
      - Keeps track of processes using cgroups(control groups).
      - snapshots capabilities and system state restoration.
      - can be a drop in replacement for SysVinit.
      - uses '.service' files rather than bash scripts
  Examples of new configuration files for systemd are:
      - /etc/hostname (redhat, replaces /etc/sysconfig/network)
      - /etc/HOSTNAME SUSE
      - /etc/hostname Debian
      - /etc/vconsole.conf - default keyboard mapping and console font
      - /etc/sysctl.d/*.conf - drop-in directory for kernel 'sysctl' parameters
      - /etc/os-release - distros ID
      
      
     Runlevel    Target Units                          Description
     0           runlevel0.target, poweroff.target     Shut down and power off the system.
     1           runlevel1.target, rescue.target       Set up a rescue shell.
     2           runlevel2.target, multi-user.target   Set up a non-graphical multi-user system.
     3           runlevel3.target, multi-user.target   Set up a non-graphical multi-user system.
     4           runlevel4.target, multi-user.target   Set up a non-graphical multi-user system.
     5           runlevel5.target, graphical.target    Set up a graphical multi-user system.
     6           runlevel6.target, reboot.target       Shut down and reboot the system.

NOTE:--------------------------------------------------------------
      SysVinit                                       systemd
         |                                              |
         v                                              v
   service utility                               systemctl utility
   update-rc.d, invoke-rc.d -- Ubuntu, Debian
   sysv-rc-conf -- Ubuntu                           
   chkconfig -- RHEL, CentOS, Fedora     
   ----------------------------------------------------------------
   
 'systemctl' is the main utility for managing services in 'systemd'
 
  Basic syntax: $ systemctl [options] command [name]
  
  
  Useage examples:
        $ systemctl --> shows status of systemd controlled services
        
        $ systemctl list-units -t service --all --> show all available services
        
        $ systemctl list-units -t service  --> show only active services
        
        $ sudo systemctl start foo --> start or activate foo  service
          sudo systemctl start foo.service
          sudo systemctl start /path/to/foo.service
        
        $ sudo systemctl stop foo.service --> stop(deactivate) a service
        
        $ sudo systemctl enable sshd.service --> to enable or disable a service
          sudo systemctl disable sshd.service 
              -- equivalent to chkconfig --add/ --del and doesn't actually start the service.
        
       
        
<---------------------------------------------------------------------------------------------------------------->
                                               Chp 5 Linux Filesystem Tree Layout
                                               
Types of file system differ by:
	- purpose
	- size
	- ownership
	- sharing
	
Objectives of chpter 5:
	- Explain why Linux requires the organization of one big filesystem tree, and 
	  what the major considerations are for how it is done.
	- Know the role played by the Filesystem Hierarcchy Standard.
	- Describe what must be available at boot in the root(/) directory, and waht
	  can available only once the system has started.
	- Explain each of the main subdirectory trees in terms of purpose and contents.

File systems are:
1. Shareable vs. non-shareable
2. Variable vs static


File main directories present in FHS

Directory       In FHS?         Purpose
/		Yes		Primary directory of the entire file system hierarchy.
/bin		Yes		Essential executable programs that must be available in 'single user mode'.
/boot		Yes		Files neede to boot - kernel, initrd ot initramfs, images, boot configuration files and bootloader programs.
/dev		Yes		Device nodes, used to interact with hardware devices.
/etc		Yes		System wide configuration files.
/home		Yes		User home directoies including personal settings, files, etc.
/lib		Yes		Libraries required bt executable binaries in .bin and /sbin.
/lib64		No		64-bit libraries requires by executable binaries in /binand /sbin, for systems which can run both 32-bit and 64-bit programs.
/media		Yes		Mount points for removable media such as CDs, DVDs, USB sticks etc.
/mnt		Yes		Temporarily mounted filesystems.
/opt		Yes		Optional application software packages.
/proc		Yes 		Virtual pseudo-filesystem giving information about the system and processes running on it
				Can be used to alter system parameters.
/sys		No		Virtual psuedo-filesystem giving information about the system and processes running on it. Can be used to
				alter system parameters. Similar to a device tree and is part of the Unified Device Model.				
/root		Yes		Home directory of the root user.
/sbin		Yes		Essential system binaries.
/srv		Yes		Site-specific data served up by the system. Seldom used.
/tmp		Yes		Temporary files; on many distributions lost across reboot and may be a ramdisk in memory.
/usr		Yes		Multi-user applications, utilities and data; theoretically read-only.
/var		Yes		Variable data that changes during system operation.


 The three file associated with each 'bootable kernel' are:
 	- vmlinuz -- compressed Linux kernel
 	- initramfs or initrd -- Initial RAM Filesystem, mounted before the real root filesystem becomes available.
 	- config --configuration file used when compiling the kernel. Used mainly for bookkeeping and reference
 	- System.map -- The kernel 'symbol table', useful for debudding. Gives the 'hexadecimal addresses' of all kernel symbols.
 	
 	
---------------------
/dev
---------------------
	contains special device files(also known as device nodes) this represent devices built into or connected to the system.
	network devices do not have device nodes in Linux and are referenced by names such as eth1 or wlan0
	
---------------------
/etc
---------------------
	contains machine-local configuration files; there should be no executable binary programs.
	sample files and directories include:
		- /etc/sysconfig -- system configuration and directories (Red Hat)
		- /etc/default -- same as above (Debian)
		- /etc/skel -- contains skeleton files used to populate newly created home directories
		- /etc/init.d -- contains start up amd shut down scripts when using System V initialization
		
--------------------
/home
--------------------
	contains all personal configuratio, data, and executable programs.
	
	
-------------------
/lib
-------------------
	contains only thise libraries needed to execute the binaries in /bin and /sbin. These are useful for booting the system
	and executing commands within the filesystem.
	kernel modules(device and filesystem drivers) are located under /lib/modules/<kernel-version-number>
	PAM(Pluggable Authentication Modules) files are stored in the /lib/security
	Systems that support both 32-bit and 64-bit libraries use /lib and /lib64 respectively.
	
-------------------
/media
-------------------
	used to mount filesystems on removeable media such as CDs, DVDs, and USB drives or even old floppy disks
	on SUSE and RHEL 7 removable media will pop up under /run/media/[username]/....
	
------------------
/mnt
------------------
	used to temporarily mount a filesystem when needed. Like 
		- NFS
		- Samba
		- CIFS
		- AFS
		
-----------------
/opt
-----------------
	used by software packages that wish to keep all their files in one isolated place rather than scatter themall over
	the system.
	Example: dolphy_app -- /opt/dolphy_app/bin, /opt/dolphy_app/man
	Special subdirectories of /opt are:
		/opt/bin
	
----------------
/proc
----------------
	mount point for a pseudo-filesystem, where information only resides in memory, not on disk. Like /dev the /proc is
	 empty on a non-running system.
	Here each active process on the system has its own subdirectory that gives detailed information about the state of the process,
	 the resources it is using, and its history.
	Important pseudo-files include: 
		- /proc/interrupts -------
		- /porc/meminfo          |
		- /proc/mounts           |-------> system's hardware
		- /proc/partitionso ------
		
		- /proc/filesystem ------|
		- /proc/sys/-------------|-------> system configuration information and interfaces
		
----------------
/sys
----------------
	mount point for sysfs pseudo-filesystem, where infromation resides only in memory
	sysfs is used both to gather information about the system, and modify its behaviour while running.
	
	
---------------
/root
---------------
	home directory of the root user
	
--------------
/sbin
--------------
	contains binaries essential for booting, restoring, recovering, and/or repairing	
	must be able to mount other filesystems on /usr, /home and other locations
	these programs should be included here:
		- fdisk, fsck, getty, halt, ifconfig, init, mkfs, mkswap, reboot, route, swapon, swapoff, update.
		
-------------
/tmp
-------------
	store temporary files, accessed by any user
	reset /tmp behaviour on RHEL 6 using 'systemctl mask tmp.mount
	
-------------
/usr
-------------
	secondary hierarchy
	used for files that are not needed for system booting.
	may be located at location different from root directory
	software packages should not create subdirectories directly under /usr
	typically read-only data
	contains binaries which are not need in single user mode
	
	
	Directory       |          Purpose
	---------------------------------------------------------------------------------
	/usr/bin	| binaries for applications not needed in single user mode
	/usr/include	| header files for compiling applications
	/usr/lib	| Libraries for programs in /bin and /sbin.
	/usr/lib64	| 64-bit libraries for 64-bit programs in /bin and /sbin.
	/usr/sbin	| Non-essential system binaries, e.g. system daemons.
	/usr/share	| Shared dara used by applications, architecture-independent
	/usr/src	| Source files usually for linux kernel.
	/usr/X11R6	| X Window files; generally obsolete.
	/usr/local	| Local data and programs specific to the host. Subdirectories include bin, sbin, lib, share, include, etc.
	

-----------------
/var
----------------
	contains variable (or volatile) data files that change frequently during system operation.
	Examples:
		- Log file
		- Spool directories and files for printing, mail queues, etc.
		- Admin data files
		- Transient and temporary files
		
		## Sample initialization file for GNU nano.
		##
		## Please note that you must have configured nano with --enable-nanorc
		## for this file to be read!  Also note that this file should not be in
		## DOS or Mac format, and that characters specially interpreted by the
		## shell should not be escaped here.
		##
		## To make sure a value is disabled, use "unset <option>".
		##
		## For the options that take parameters, the default value is given.
		## Other options are unset by default.
		##
		## Quotes inside string parameters don't have to be escaped with
		## backslashes.  The last double quote in the string will be treated as
		## its end.  For example, for the "brackets" option, ""')>]}" will match
		## ", ', ), >, ], and }.
		
		## Use auto-indentation.
		# set autoindent
		
		## Backup files to filename~.
		# set backup
		
		## The directory to put unique backup files in.
		# set backupdir ""
		
		## Do backwards searches by default.
		# set backwards
		
		## Use bold text instead of reverse video text.
		# set boldtext
		
		## The characters treated as closing brackets when justifying
		## paragraphs.  They cannot contain blank characters.  Only closing
		## punctuation, optionally followed by closing brackets, can end
		## sentences.
		##
		# set brackets ""')>]}"
		
		## Do case sensitive searches by default.
		# set casesensitive
		
		## Constantly display the cursor position in the statusbar.  Note that
		## this overrides "quickblank".
		# set const
		
		## Use cut to end of line by default.
		# set cut
		
		## Set the line length for wrapping text and justifying paragraphs.
		## If fill is 0 or less, the line length will be the screen width less
		## this number.
		##
		# set fill -8
		
		## Enable ~/.nano_history for saving and reading search/replace strings.
		# set historylog
		
		## The opening and closing brackets that can be found by bracket
		## searches.  They cannot contain blank characters.  The former set must
		## come before the latter set, and both must be in the same order.
		##
		# set matchbrackets "(<[{)>]}"
		
		## Use the blank line below the titlebar as extra editing space.
		# set morespace
		
		## Enable mouse support, if available for your system.  When enabled,
		## mouse clicks can be used to place the cursor, set the mark (with a
		## double click), and execute shortcuts.  The mouse will work in the X
		## Window System, and on the console when gpm is running.
		##
		# set mouse
		
		## Allow multiple file buffers (inserting a file will put it into a
		## separate buffer).  You must have configured with --enable-multibuffer
		## for this to work.
		##
		# set multibuffer
		
		## Don't convert files from DOS/Mac format.
		# set noconvert
		
		## Don't follow symlinks when writing files.
		# set nofollow
		
		## Don't display the helpful shortcut lists at the bottom of the screen.
		# set nohelp
		
		## Don't add newlines to the ends of files.
		# set nonewlines
		
		## Don't wrap text at all.
		# set nowrap
		
		## Set operating directory.  nano will not read or write files outside
		## this directory and its subdirectories.  Also, the current directory
		## is changed to here, so any files are inserted from this dir.  A blank
		## string means the operating directory feature is turned off.
		##
		# set operatingdir ""
		
		## Preserve the XON and XOFF keys (^Q and ^S).
		# set preserve
		
		## The characters treated as closing punctuation when justifying
		## paragraphs.  They cannot contain blank characters.  Only closing
		## punctuation, optionally followed by closing brackets, can end
		## sentences.
		##
		# set punct "!.?"
		
		## Do quick statusbar blanking.  Statusbar messages will disappear after
		## 1 keystroke instead of 26.  Note that "const" overrides this.
		##
		# set quickblank
		
		## The email-quote string, used to justify email-quoted paragraphs.
		## This is an extended regular expression if your system supports them,
		## otherwise a literal string.  Default:
		# set quotestr "^([ 	]*[#:>\|}])+"
		## if you have extended regular expression support, otherwise:
		# set quotestr "> "
		
		## Fix Backspace/Delete confusion problem.
		# set rebinddelete
		
		## Fix numeric keypad key confusion problem.
		# set rebindkeypad
		
		## Do extended regular expression searches by default.
		# set regexp
		
		## Make the Home key smarter.  When Home is pressed anywhere but at the
		## very beginning of non-whitespace characters on a line, the cursor
		## will jump to that beginning (either forwards or backwards).  If the
		## cursor is already at that position, it will jump to the true
		## beginning of the line.
		# set smarthome
		
		## Use smooth scrolling as the default.
		# set smooth
		
		## Enable soft line wrapping (AKA full line display).
		# set softwrap
		
		## Use this spelling checker instead of the internal one.  This option
		## does not properly have a default value.
		##
		# set speller "aspell -x -c"
		
		## Allow nano to be suspended.
		# set suspend
		
		## Use this tab size instead of the default; it must be greater than 0.
		# set tabsize 8
		
		## Convert typed tabs to spaces.
		# set tabstospaces
		
		## Save automatically on exit, don't prompt.
		# set tempfile
		
		## Enable the new (EXPERIMENTAL) generic undo code, not just for line
		## cuts.
		# set undo
		
		## Disallow file modification.  Why would you want this in an rcfile? ;)
		# set view
		
		## The two single-column characters used to display the first characters
		## of tabs and spaces.  187 in ISO 8859-1 (0000BB in Unicode) and 183 in
		## ISO-8859-1 (0000B7 in Unicode) seem to be good values for these.
		# set whitespace "  "
		
		## Detect word boundaries more accurately by treating punctuation
		## characters as parts of words.
		# set wordbounds
		
		
		## Color setup
		##
		## Format:
		##
		## syntax "short description" ["filename regex" ...]
		##
		## The "none" syntax is reserved; specifying it on the command line is
		## the same as not having a syntax at all.  The "default" syntax is
		## special: it takes no filename regexes, and applies to files that
		## don't match any other syntax's filename regexes.
		##
		## color foreground,background "regex" ["regex"...]
		## or
		## icolor foreground,background "regex" ["regex"...]
		##
		## "color" will do case sensitive matches, while "icolor" will do case
		## insensitive matches.
		##
		## Valid colors: white, black, red, blue, green, yellow, magenta, cyan.
		## For foreground colors, you may use the prefix "bright" to get a
		## stronger highlight.
		##
		## To use multi-line regexes, use the start="regex" end="regex"
		## [start="regex" end="regex"...] format.
		##
		## If your system supports transparency, not specifying a background
		## color will use a transparent color.  If you don't want this, be sure
		## to set the background color to black or white.
		##
		## If you wish, you may put your syntaxes in separate files.  You can
		## make use of such files (which can only include "syntax", "color", and
		## "icolor" commands) as follows:
		##
		## include "/path/to/syntax_file.nanorc"
		##
		## Unless otherwise noted, the name of the syntax file (without the
		## ".nanorc" extension) should be the same as the "short description"
		## name inside that file.  These names are kept fairly short to make
		## them easier to remember and faster to type using nano's -Y option.
		##
		## All regexes should be extended regular expressions.
		
		## Key bindings
		## Please see nanorc(5) for more details on this
		##
		## Here are some samples to get you going
		##
		# bind M-W nowrap main
		# bind M-A casesens search
		# bind ^S research main
		
		## Set this if your backspace key sends delete most of the time (2.1.3+)
		# bind kdel backspace all
		
		
		## Nanorc files
		# include "/usr/share/nano/nanorc.nanorc"
		
		## C/C++
		# include "/usr/share/nano/c.nanorc"
		
		## Makefiles
		# include "/usr/share/nano/makefile.nanorc"
		
		## Cascading Style Sheets
		# include "/usr/share/nano/css.nanorc"
		
		## Debian files
		# include "/usr/share/nano/debian.nanorc"
		
		## Gentoo files
		# include "/usr/share/nano/gentoo.nanorc"
		
		## HTML
		# include "/usr/share/nano/html.nanorc"
		
		## PHP
		# include "/usr/share/nano/php.nanorc"
		
		## TCL
		# include "/usr/share/nano/tcl.nanorc"
		
		## TeX
		# include "/usr/share/nano/tex.nanorc"
		
		## Quoted emails (under e.g. mutt)
		# include "/usr/share/nano/mutt.nanorc"
		
		## Patch files
		# include "/usr/share/nano/patch.nanorc"
		
		## Manpages
		# include "/usr/share/nano/man.nanorc"
		
		## Groff
		# include "/usr/share/nano/groff.nanorc"
		
		## Perl
		# include "/usr/share/nano/perl.nanorc"
		
		## Python
		# include "/usr/share/nano/python.nanorc"
		
		## Ruby
		# include "/usr/share/nano/ruby.nanorc"
		
		## Java
		# include "/usr/share/nano/java.nanorc"
		
		## Fortran
		# include "/usr/share/nano/fortran.nanorc"
		
		## Objective-C
		# include "/usr/share/nano/objc.nanorc"
		
		## OCaml
		# include "/usr/share/nano/ocaml.nanorc"
		
		## AWK
		# include "/usr/share/nano/awk.nanorc"
		
		## Assembler
		# include "/usr/share/nano/asm.nanorc"
		
		## Bourne shell scripts
		# include "/usr/share/nano/sh.nanorc"
		
		## POV-Ray
		# include "/usr/share/nano/pov.nanorc"
		
		## XML-type files
		# include "/usr/share/nano/xml.nanorc"
		
		
      
